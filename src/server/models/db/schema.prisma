generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ListItem {
  id                  Int      @id @default(autoincrement())
  reference           String   @default(uuid()) @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  type                String
  jsonData            Json

  address             Address @relation(fields: [addressId], references: [id])
  addressId           Int

  isApproved          Boolean @default(false)
  isPublished         Boolean @default(false)
  isBlocked           Boolean @default(false)

  @@index([type, reference, isApproved, isPublished, isBlocked])
}

model Address {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  firstLine    String   @db.VarChar(255)
  secondLine  String?  @db.VarChar(255)
  city        String?  @db.VarChar(255)
  postCode    String   @db.VarChar(255)
  country     Country  @relation(fields: [countryId], references: [id])
  countryId   Int
  
  ListItem    ListItem[]
  
  geoLocationId   Int?
}

// Prisma does not support PostGis geography types so Address.geoLocation 
// is temporarily moved to a separate table GeoLocation which is created using raw sql
// please see ../helpers
// model GeoLocation {
//   id          Int @id @default(autoincrement())
//   location    geography(POINT)
//   address     Address[]
// }

model Country {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  name      String    @db.VarChar(255) @unique
  address   Address[]
}

// for Mac M1, add "linux-arm-openssl-1.1.x" to binaryTargets
generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["fieldReference", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model List {
  id                            Int      @id @default(autoincrement())
  reference                     String   @default(uuid()) @unique
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  nextAnnualReviewStartDate     DateTime? @db.Date
  lastAnnualReviewStartDate     DateTime? @db.Date
  isAnnualReview                Boolean @default(false)


  type                String
  country             Country  @relation(fields: [countryId], references: [id])
  countryId           Int

  jsonData            Json

  items               ListItem[]

  @@index([type, countryId])
  @@unique([countryId, type])
}

model ListItem {
  id                  Int      @id @default(autoincrement())
  reference           String   @default(uuid()) @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  type                String
  jsonData            Json

  address             Address @relation(fields: [addressId], references: [id])
  addressId           Int

  isApproved          Boolean @default(false) //TODO: deprecate
  isPublished         Boolean @default(false)
  isBlocked           Boolean @default(false) //TODO: deprecate
  isAnnualReview      Boolean @default(false)

  pinnedBy            User[]

  list                List @relation(fields: [listId], references: [id])
  listId              Int

  history             Event[]

  status              Status @default(NEW)

  @@index([type, reference, isApproved, isPublished, isBlocked])
}

model Address {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  firstLine    String   @db.VarChar(255)
  secondLine  String?  @db.VarChar(255)
  city        String?  @db.VarChar(255)
  postCode    String?   @db.VarChar(255)
  country     Country  @relation(fields: [countryId], references: [id])
  countryId   Int

  ListItem    ListItem[]

  geoLocation    GeoLocation?  @relation(fields: [geoLocationId], references: [id])
  geoLocationId   Int?
}

model Country {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  name      String    @db.VarChar(255) @unique
  address   Address[]
  list      List[]
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  email     String    @unique
  jsonData  Json

  pinnedItems ListItem[]
}



model Audit {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  type                String?
  auditEvent          AuditEvent @default(UNDEFINED)

  jsonData            Json

  @@index([type])
  @@index([jsonData])
}

model Feedback {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  type                String
  jsonData            Json

  @@index([type])
}

// actions that can be performed on anything that is not a ListItem. ListItems have their own events.
enum AuditEvent {
  NEW
  OUT_WITH_PROVIDER // TODO: deprecate
  EDITED // TODO: deprecate
  ANNUAL_REVIEW // TODO: deprecate
  REVIEWED // TODO: deprecate
  UNPUBLISHED // TODO: deprecate
  PUBLISHED // TODO: deprecate
  PINNED // TODO: deprecate
  UNPINNED // TODO: deprecate
  DELETED
  UNDEFINED
  REMINDER
}

enum Status {
  NEW
  OUT_WITH_PROVIDER
  EDITED
  PUBLISHED // "No action needed"
  UNPUBLISHED //
  CHECK_ANNUAL_REVIEW
  ANNUAL_REVIEW_OVERDUE
}

model Event {
  id                  Int    @id @default(autoincrement())
  time                DateTime @default(now())
  listItem            ListItem? @relation(fields: [listItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listItemId          Int
  type                ListItemEvent
  jsonData            Json

  @@index([time, listItemId])
}

enum ListItemEvent {
  NEW
  OUT_WITH_PROVIDER // Requested changes
  EDITED
  UNPUBLISHED
  PUBLISHED
  PINNED
  UNPINNED
  DELETED
  UNDEFINED
  ANNUAL_REVIEW_STARTED
  CHECK_ANNUAL_REVIEW
  ANNUAL_REVIEW_OVERDUE
  ARCHIVED
  REMINDER
}

view FirstPublishedOnList {
  listId                      Int
  eventId                     Int
  firstPublished              DateTime
  nextAnnualReviewStartDate   DateTime? @db.Date
  @@unique([listId, eventId])
}
// note: keep GeoLocation here -- syntax parsers don't like the unsupported
model GeoLocation {
  id          Int @id @default(autoincrement())
  location    Unsupported("geography(POINT)")
  address     Address[]

  @@index([location])
}

view ListsForDashboard {
  listId                      Int
  type                        String
  country                     String
  admins                      Int
  live                        Int
  actionNeeded                Int
  isOverdue                   Boolean @default(false)
  nextAnnualReviewStartDate   DateTime? @db.Date
  lastAnnualReviewStartDate   DateTime? @db.Date
  jsonData                    Json
  @@unique([listId])
}

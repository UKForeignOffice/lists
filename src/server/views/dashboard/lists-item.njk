{% extends "layout.njk" %}
{% import "./macros.njk" as dashboardMacros %}

{% block pageTitle %}
  List management - {{ title }} - {{ SERVICE_NAME }}
{% endblock %}

{% block header %}
  {% include "includes/header-list-mgmt.njk" %}
{% endblock %}

{% block content %}
<div class="govuk-grid-row back-links__container">
  <aside class="govuk-grid-column-one-quarter back-links__aside">
    <div class="back-links__item">
      <a class="govuk-link govuk-back-link" href="{{ listIndexUrl }}">Back</a>
    </div>
    <div class="back-links__item">
      <a class="govuk-link govuk-back-link" href="{{ listIndexUrl }}">Back</a>
    </div>
  </aside>


  <div class="govuk-grid-column-three-quarters">
    {% if error and error.text %}
      {{ dashboardMacros.errorBanner(error) }}
    {% endif %}

    <div class="flex-space-between">
      <h1 class="govuk-heading-l">
        {{ title }} details
      </h1>
      <div class="govuk-caption-m">Submitted: {{ listItem.createdAt | date }}</div>
    </div>

    {% if not listItem %}
      <p class="govuk-body">Details could not be found</p>
    {% else %}
      <form id="pinForm"
        class="form"
        method="post" required>
      </form>
      <form id="mainForm" class="form" action="{{ listItemUrl }}" method="post" required>
        <input type="hidden" name="_csrf" id="_csrf" value="{{ csrfToken }}" />
        <div class="govuk-list dashboard__content-list">
          <div id="item-{{ listItem.id }}">
            {% include "./partials/details.njk" %}
            {{ dashboardMacros.listItemEditActionBar(list, listItem, dashboardRoutes, listItem.jsonData.contactName, isPinned, actionButtons, changeMessage) }}
          </div>
        </div>
      </form>

      <script nonce="{{cspNonce}}">
        const hiddenClass = "govuk-radios__conditional--hidden";
        const radios = document.querySelectorAll('input[type=radio][name="action"]');
        const radiosArray = Array.from(radios);
        const requestChangesRadioBtn = radiosArray.find(radio => radio.value === "requestChanges");
        const archiveRadioBtn = radiosArray.find(radio => radio.value === "archive");

        if (requestChangesRadioBtn && !requestChangesRadioBtn.checked) {
          document.getElementById("conditional-action-requestChanges").classList.add(hiddenClass);
        }
        if (archiveRadioBtn && !archiveRadioBtn.checked) {
          document.getElementById("conditional-action-archive").classList.add(hiddenClass);
        }

        radios.forEach(radio => radio.addEventListener('change', () => {
          const isRequestingChanges = radio.value === "requestChanges" && radio.checked;
          const requestChangesTextarea = document.getElementById("conditional-action-requestChanges");

          if (isRequestingChanges) {
            requestChangesTextarea.classList.remove(hiddenClass);
          } else {
            requestChangesTextarea.classList.add(hiddenClass);
          }
        }));
      </script>
    {% endif %}
  </div>
</div>
{% endblock %}

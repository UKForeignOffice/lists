version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@1.0.0
  node: circleci/node@5.0.0

defaults: &defaults
  working_directory: ~/repo

jobs:
  test:
    <<: *defaults

    docker:
      - image: cimg/node:14.17.0-browsers

    steps:
      - checkout

      - restore_cache:
          keys:
            - form-runner-1-{{ checksum "src/server/components/formRunner/install-form-runner.sh" }}
            - form-runner-1-

      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps-

      - run: npm ci

      - run:
          name: Prisma generate
          command: npm run prisma:generate

      - run:
          name: Type check
          command: npm run type-check

      - run:
          name: Lint
          command: npm run lint

      - run:
          name: Install Form Runner
          command: npm run form-runner:install

      - run:
          name: Run tests
          command: npm run test

      - save_cache:
          key: form-runner-1-{{ checksum "src/server/components/formRunner/install-form-runner.sh" }}
          paths:
            - ./lib/form-runner

      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules



  smoke:
    <<: *defaults
    machine:
      image: ubuntu-2004:202111-02

    steps:
      - checkout
      - node/install:
          install-yarn: true
          node-version: '14'

      - restore_cache:
          keys:
            - form-runner-1-{{ checksum "src/server/components/formRunner/install-form-runner.sh" }}
            - form-runner-1-

      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps-

      - run: npm ci

      - run:
          name: Prisma generate
          command: npm run prisma:generate

      - run:
          name: build postgres
          command: |
            docker-compose -f docker-compose.ci.yml build \
            --build-arg PGP_PUB=$PGP_PUB \
            --build-arg PGP_SECRET=$PGP_SECRET \
            --build-arg PGP_OTRUST=$PGP_OTRUST postgres
      - run:
          name: Start docker-compose and verify service(s)
          command: |
            docker-compose -f docker-compose.ci.yml up -d
            docker ps

      - run:
          name: Install Form Runner
          command: npm run form-runner:install

      - run:
          name: run build
          command: npm run build:ci

      - run:
          name: run start
          background: true
          command: npm run start:ci

      - run: sleep 30

      - run:
          name: Check server is running
          command: |
            curl -4 --retry 10 --retry-connrefused --retry-delay 10 http://localhost:3000/
      - run:
          name: Run smoke tests
          command: npm run smoke-tests

      - save_cache:
          key: form-runner-1-{{ checksum "src/server/components/formRunner/install-form-runner.sh" }}
          paths:
            - ./lib/form-runner

      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      - store_artifacts:
          path: cypress/videos
          destination: cypress



  publish:
    <<: *defaults

    parameters:
      app:
        description: The app to build and publish. Pick from lists or lists-postgres.
        default: "lists"
        type: string

    machine:
      image: ubuntu-2004:202111-02

    steps:
      - checkout
      - run:
          name: Install awscli
          command: sudo pip install awscli

      - run:
          name: "set $DOCKER_TAG"
          command:
            | # set $DOCKER_TAG as either the git tag that triggered the build, or the git sha (for deploy-test branch)
            if [ "<<pipeline.git.tag>>" == "" ]; then echo 'export DOCKER_TAG="<<pipeline.git.revision>>"' >> $BASH_ENV; else echo 'export DOCKER_TAG="<<pipeline.git.tag>>"' >> $BASH_ENV; fi


      - when:
          condition:
            equal: [lists, <<parameters.app>>]
          steps:
            - run:
                name: Publish docker image - lists
                command: |
                  eval $(aws ecr get-login --no-include-email --region eu-west-2)
                  docker build --build-arg NODE_ENV=production --build-arg DOCKER_TAG=$DOCKER_TAG -t 523508197323.dkr.ecr.eu-west-2.amazonaws.com/fco/lists:$DOCKER_TAG .
                  docker push 523508197323.dkr.ecr.eu-west-2.amazonaws.com/fco/lists:$DOCKER_TAG
      - when:
          condition:
            equal: [lists-postgres, <<parameters.app>>]
          steps:
          - run:
              name: build postgres
              command: |
                docker-compose -f docker-compose.ci.yml build \
                --build-arg PGP_PUB=$PGP_PUB \
                --build-arg PGP_SECRET=$PGP_SECRET \
                --build-arg PGP_OTRUST=$PGP_OTRUST postgres
          - run:
              name: Publish docker image - lists-postgres
              command: |
                eval $(aws ecr get-login --no-include-email --region eu-west-2)
                docker tag repo_postgres 523508197323.dkr.ecr.eu-west-2.amazonaws.com/fco/lists-postgres:$DOCKER_TAG
                docker push 523508197323.dkr.ecr.eu-west-2.amazonaws.com/fco/lists-postgres:$DOCKER_TAG

  deploy:
    <<: *defaults

    parameters:
      namespace:
        type: string

    machine:
      image: ubuntu-1604:202004-01

    steps:
      - attach_workspace:
          at: .

      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi

            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download

      - run:
          name: Install OpenVPN
          command: |
            sudo apt-get update
            sudo apt-get install openvpn -y --force-yes

      - run:
          name: Check IP before VPN connection
          command: |
            ifconfig
            route -n
            sudo netstat -anp
            cat /etc/resolv.conf
            curl checkip.amazonaws.com

      - run:
          name: VPN Setup
          background: true
          command: |
            phone_home=$(netstat -an | grep ':22 .*ESTABLISHED' | head -n1 | awk '{ split($5, a, ":"); print a[1] }')
            echo $phone_home

            echo $VPN_CLIENT_CONFIG | base64 --decode > /tmp/config.ovpn
            printf "$VPN_USER\n$VPN_PASSWORD" > /tmp/vpn.login
            sudo openvpn --config /tmp/config.ovpn --auth-user-pass /tmp/vpn.login \
            --route $phone_home 255.255.255.255 net_gateway \
            --route 169.254.0.0 255.255.0.0 net_gateway

      - run:
          name: Wait for VPN connection to be established
          command: |
            sleep 60
            #while [ $(cat /tmp/openvpn.log|grep -c "Initialization Sequence Completed") == 0 ]; do
            #  echo "Attempting to connect..."
            #  sleep 5;
            #done
            echo "VPN Connected"

      - run:
          name: Check IP after VPN connection
          command: |
            ifconfig
            route -n
            sudo netstat -anp
            cat /etc/resolv.conf
            curl checkip.amazonaws.com

      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: fco-forms-test
          aws-region: eu-west-2
          install-kubectl: true

      - kubernetes/update-container-image:
          namespace: << parameters.namespace >>
          container-image-updates: lists=523508197323.dkr.ecr.eu-west-2.amazonaws.com/fco/lists:$CIRCLE_SHA1
          resource-name: deployment/lists

      - kubernetes/update-container-image:
          namespace: << parameters.namespace >>
          container-image-updates: lists-postgres=523508197323.dkr.ecr.eu-west-2.amazonaws.com/fco/lists-postgres:$CIRCLE_SHA1
          resource-name: deployment/lists-postgres


workflows:
  version: 2
  build-deploy:
    jobs:
      - test:
          filters:
            tags:
              only: /.*/

      - smoke

      - publish:
          name: publish-lists
          app: lists
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              only:
                - deploy-test
          context:
            - VPN
            - AWS
          requires:
            - test
            - smoke

      - publish:
          name: publish-lists-postgres
          app: lists-postgres
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              only:
                - deploy-test
          context:
            - VPN
            - AWS

      - deploy:
          name: deploy-test
          namespace: test-lists
          context:
            - VPN
            - AWS
          requires:
            - publish-lists
            - publish-lists-postgres
          filters:
            branches:
              only:
                - deploy-test


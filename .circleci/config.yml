version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.0.0
  node: circleci/node@5.0.0
  browser-tools: circleci/browser-tools@1.3.0

defaults: &defaults
  working_directory: ~/repo

jobs:
  test:
    <<: *defaults

    docker:
      - image: cimg/node:14.17.0-browsers

    steps:
      - checkout

      - restore_cache:
          keys:
            - form-runner-1-{{ checksum "src/server/components/formRunner/install-form-runner.sh" }}
            - form-runner-1-

      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps-

      - run: npm i

      - run:
          name: Prisma generate
          command: npm run prisma:generate

#      - run:
#          name: Type check
#          command: npm run type-check

      - run:
          name: Lint
          command: npm run lint

      - run:
          name: Run tests
          command: npm run test

      - save_cache:
          key: form-runner-1-{{ checksum "src/server/components/formRunner/install-form-runner.sh" }}
          paths:
            - ./lib/form-runner

      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules



  smoke:
    <<: *defaults
    machine:
      image: ubuntu-2004:202111-02

    steps:
      - checkout
      - node/install:
          install-yarn: true
          node-version: '14'
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver

      - restore_cache:
          keys:
            - form-runner-1-{{ checksum "src/server/components/formRunner/install-form-runner.sh" }}
            - form-runner-1-

      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps-

      - run:
          name: Check install
          command: |
            google-chrome --version
            chromedriver --version

      - run:
          name: Install Form Runner
          command: npm run form-runner:install

      - run: npm ci

      - run:
          name: Prisma generate
          command: npm run prisma:generate

      - run:
          name: build postgres
          command: |
            docker-compose -f docker-compose.ci.yml build \
            --build-arg PGP_PUB=$PGP_PUB \
            --build-arg PGP_SECRET=$PGP_SECRET \
            --build-arg PGP_OTRUST=$PGP_OTRUST postgres
      - run:
          name: Start docker-compose and verify service(s)
          command: |
            docker-compose -f docker-compose.ci.yml up -d
            docker ps

      - run:
          name: Start Form Runner
          command: npm run form-runner:start

      - run:
          name: run build
          command: npm run build:ci

      - run:
          environment:
            CI_SMOKE_TEST: "true"
          name: run start
          background: true
          command: npm run start:ci

      - run: sleep 30

      - run:
          name: Check server is running
          command: |
            curl -4 --retry 10 --retry-connrefused --retry-delay 10 http://localhost:3000/
      - run:
          environment:
            CI_SMOKE_TEST: "true"
          name: Run smoke tests
          command: npm run smoke-tests

      - save_cache:
          key: form-runner-1-{{ checksum "src/server/components/formRunner/install-form-runner.sh" }}
          paths:
            - ./lib/form-runner

      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      - store_artifacts:
          path: cypress/videos
          destination: cypress


  publish:
    <<: *defaults

    parameters:
      app:
        description: The app to build and publish. Pick from lists or lists-postgres.
        default: "lists"
        type: string

    machine:
      image: ubuntu-2004:202111-02

    steps:
      - checkout
      - run:
          name: Install awscli
          command: sudo pip install awscli

      - run:
          name: "set $DOCKER_TAG"
          command:
            | # set $DOCKER_TAG as either the git tag that triggered the build, or the git sha (for deploy-test branch)
            if [ "<<pipeline.git.tag>>" == "" ]; then echo 'export DOCKER_TAG="<<pipeline.git.revision>>"' >> $BASH_ENV; else echo 'export DOCKER_TAG="<<pipeline.git.tag>>"' >> $BASH_ENV; fi


      - when:
          condition:
            equal: [lists, <<parameters.app>>]
          steps:
            - run:
                name: Publish docker image - lists
                command: |
                  eval $(aws ecr get-login --no-include-email --region eu-west-2)
                  docker build --build-arg NODE_ENV=production --build-arg DOCKER_TAG=$DOCKER_TAG -t 523508197323.dkr.ecr.eu-west-2.amazonaws.com/fco/lists:$DOCKER_TAG .
                  docker push 523508197323.dkr.ecr.eu-west-2.amazonaws.com/fco/lists:$DOCKER_TAG
      - when:
          condition:
            equal: [lists-postgres, <<parameters.app>>]
          steps:
            - run:
                name: build postgres
                command: |
                  docker-compose -f docker-compose.ci.yml build \
                  --build-arg PGP_PUB=$PGP_PUB \
                  --build-arg PGP_SECRET=$PGP_SECRET \
                  --build-arg PGP_OTRUST=$PGP_OTRUST postgres
            - run:
                name: Publish docker image - lists-postgres
                command: |
                  eval $(aws ecr get-login --no-include-email --region eu-west-2)
                  docker tag repo_postgres 523508197323.dkr.ecr.eu-west-2.amazonaws.com/fco/lists-postgres:$DOCKER_TAG
                  docker push 523508197323.dkr.ecr.eu-west-2.amazonaws.com/fco/lists-postgres:$DOCKER_TAG

  deploy:
    <<: *defaults

    parameters:
      namespace:
        type: string

    machine:
      image: ubuntu-2004:202201-02

    steps:
      - attach_workspace:
          at: .

      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi

            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download

      - run:
          name: Install OpenVPN
          command: |
            sudo apt-get update
            sudo apt-get install net-tools -y
            sudo apt-get install openvpn openvpn-systemd-resolved -y

      - run:
          name: Check IP before VPN connection
          command: |
            ip a
            echo "Public IP before VPN connection is $(curl checkip.amazonaws.com)"

      - run:
          name: VPN Setup
          background: true
          command: |
            echo $VPN_CLIENT_CONFIG | base64 --decode > /tmp/config.ovpn

            if grep -q auth-user-pass /tmp/config.ovpn; then
              if [ -z "${VPN_USER:-}" ] || [ -z "${VPN_PASSWORD:-}" ]; then
                echo "Your VPN client is configured with a user-locked profile. Make sure to set the VPN_USER and VPN_PASSWORD environment variables"
                exit 1
              else
                printf "$VPN_USER\\n$VPN_PASSWORD" > /tmp/vpn.login
              fi
            fi

            SYS_RES_DNS=$(systemd-resolve --status | grep 'DNS Servers'|awk '{print $3}')
            echo $SYS_RES_DNS

            phone_home=$(ss -Hnto state established '( sport = :ssh )' | head -n1 | awk '{ split($4, a, ":"); print a[1] }') || $(sudo netstat -an | grep ':22 .*ESTABLISHED' | head -n1 | awk '{ split($5, a, ":"); print a[1] }')
            echo $phone_home

            vpn_command=(sudo openvpn
              --config /tmp/config.ovpn
              --route $SYS_RES_DNS 255.255.255.255 net_gateway
              --route 169.254.0.0 255.255.0.0 net_gateway
              --script-security 2
              --up /etc/openvpn/update-systemd-resolved --up-restart
              --down /etc/openvpn/update-systemd-resolved --down-pre
              --dhcp-option DOMAIN-ROUTE .)

            if grep -q auth-user-pass /tmp/config.ovpn; then
              vpn_command+=(--auth-user-pass /tmp/vpn.login)
            fi

            if [ -n "$phone_home" ]; then
              vpn_command+=(--route $phone_home 255.255.255.255 net_gateway)
            fi

            for IP in $(host runner.circleci.com | awk '{ print $4; }')
              do
                vpn_command+=(--route $IP 255.255.255.255 net_gateway)
                echo $IP
            done

            "${vpn_command[@]}" > /tmp/openvpn.log

      - run:
          name: Wait for the connection to be established and check IP
          command: |
            until [ -f /tmp/openvpn.log ] && [ "$(grep -c "Initialization Sequence Completed" /tmp/openvpn.log)" != 0 ]; do
              echo "Attempting to connect to VPN server..."
              sleep 3;
            done

            printf "\nVPN connected\n"
            printf "\nPublic IP is now $(curl checkip.amazonaws.com)\n"

      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: fco-forms-test
          aws-region: eu-west-2
          install-kubectl: true

      - kubernetes/update-container-image:
          namespace: << parameters.namespace >>
          container-image-updates: lists=523508197323.dkr.ecr.eu-west-2.amazonaws.com/fco/lists:$CIRCLE_SHA1
          resource-name: deployment/lists

#      - kubernetes/update-container-image:
#          namespace: << parameters.namespace >>
#          container-image-updates: lists-postgres=523508197323.dkr.ecr.eu-west-2.amazonaws.com/fco/lists-postgres:$CIRCLE_SHA1
#          resource-name: deployment/lists-postgres

      - run:
          name: Disconnect from OpenVPN
          command: |
            sudo killall openvpn || true
          when: always

workflows:
  version: 2
  build-deploy:
    jobs:
      - test:
          filters:
            tags:
              only: /.*/

      - smoke

      - publish:
          name: publish-lists
          app: lists
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              only:
                - deploy-test
          context:
            - VPN
            - AWS
          requires:
            - test
            - smoke

      - publish:
          name: publish-lists-postgres
          app: lists-postgres
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              only:
                - deploy-test
                - deploy-db
          context:
            - VPN
            - AWS

      - deploy:
          name: deploy-test
          namespace: test-lists
          context:
            - VPN
            - AWS
          requires:
            - publish-lists
            - publish-lists-postgres
          filters:
            branches:
              only:
                - deploy-test

      - deploy:
          name: deploy-db
          namespace: test-lists
          context:
            - VPN
            - AWS
          requires:
            - publish-lists-postgres
          filters:
            branches:
              only:
                - deploy-db
